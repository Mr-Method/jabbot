#!/usr/bin/env perl
use v5.18;
use FindBin;
use lib "$FindBin::Bin/../lib";

our $VERSION = "0.1";

use Jabbot;
use Jabbot::Core;

use constant SHOULD_RELAUNCH_WITH_MORBO => !grep {/Server\/(Morbo|Hypnotoad)/} keys %INC;

if (SHOULD_RELAUNCH_WITH_MORBO) {
    require Mojo::Server::Morbo;
    my $config = Jabbot->config->{cored};
    my $hostport = ( $config->{host} // "localhost" ) . ":" . ( $config->{port} // 18000 );
    my $morbo = Mojo::Server::Morbo->new;
    $morbo->daemon->listen([ "http://". $hostport ]);
    $morbo->run($0);
    exit;
}


use Time::HiRes;

use Mojo::IOLoop;
use Mojolicious::Lite;

my $CORE = Jabbot::Core->new;

get '/' => sub {
    my $c = shift;
    $c->render(json => {
        name     => "jabber-core",
        version  => $VERSION,
        plugins  => [ map { ref($_) } @{ $CORE->{plugins} } ],
        services => $CORE->{services},
    });
};

get '/answers' => sub {
    my $c = shift;
    my $q = $c->req->json("/q") || $c->param('q');
    my %args = ( question => $q );
    my $begin_t = Time::HiRes::time;
    my $answers = $CORE->answers(%args);
    my $took = Time::HiRes::time - $begin_t;

    $c->render(json => {
        _took   => $took,
        answers => $answers
    });
};

post '/services' => sub {
    my $c = shift;

    my $srv = $c->req->json(); # { "name": "...", "host", "...", "port": "..." }

    my $begin_t = Time::HiRes::time;

    my $success = 0;
    if ( defined($srv->{name}) && defined($srv->{host}) && defined($srv->{port}) ) {
        $CORE->register_service($srv);
        $success = 1;
    }

    my $took = Time::HiRes::time - $begin_t;

    $c->render(json => {
        _took   => $took,
        success => $success
    });
};

my $app = app;
$app->start;
